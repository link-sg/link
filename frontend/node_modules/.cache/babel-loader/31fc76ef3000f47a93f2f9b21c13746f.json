{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JoshuaTan\\\\Desktop\\\\link\\\\frontend\\\\src\\\\screens\\\\SearchResult.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Main/Header\";\nimport SearchListing from \"../components/SearchResults/SearchListing\";\nimport NoMatches from \"../components/SearchResults/NoMatches\";\nimport \"./styles/SearchResult.css\";\nimport Headernew from \"../components/Main/headernew\";\nimport BACKENDADDRESS from \"../constants/BackendAddress\";\n\nconst SearchResult = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [matchedListings, setMatchedListings] = useState();\n  let query = props.location.search;\n  let searchphrase = query.substring(9); // searchphrase = what the user typed\n\n  searchphrase = searchphrase.toLowerCase().replace(/(<([^>]+)>)/gi, \"\"); // TODO: configure for multiple words\n\n  useEffect(() => {\n    setIsLoading(true); // call express api to get search results\n\n    const getListings = async () => {\n      try {\n        const response = await fetch(`${BACKENDADDRESS}/api/search/keyword/${searchphrase}`);\n        const responseData = await response.json(); // returns an array of listings\n\n        setMatchedListings(responseData.matchedListings);\n      } catch (err) {\n        // Todo: Add Error Handling if API call fails\n        console.log(err);\n      }\n\n      setIsLoading(false);\n    };\n\n    getListings();\n  }, [searchphrase]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), !isLoading && matchedListings && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResultsPageBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, matchedListings.length === 0 ?\n  /*#__PURE__*/\n  // No matches for what the user found\n  React.createElement(NoMatches, {\n    searchphrase: searchphrase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }) : matchedListings.map(listing => /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: `/listing/${listing.title}`,\n      search: `${listing.listingId}`\n    },\n    key: listing.listingId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SearchListing, {\n    listing: listing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  })))));\n};\n\nexport default SearchResult;","map":{"version":3,"sources":["C:/Users/JoshuaTan/Desktop/link/frontend/src/screens/SearchResult.js"],"names":["React","useEffect","useState","Link","Header","SearchListing","NoMatches","Headernew","BACKENDADDRESS","SearchResult","props","isLoading","setIsLoading","matchedListings","setMatchedListings","query","location","search","searchphrase","substring","toLowerCase","replace","getListings","response","fetch","responseData","json","err","console","log","width","length","map","listing","pathname","title","listingId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAO,2BAAP;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,EAAtD;AACA,MAAIa,KAAK,GAAGL,KAAK,CAACM,QAAN,CAAeC,MAA3B;AAEA,MAAIC,YAAY,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAAnB,CAL8B,CAM9B;;AACAD,EAAAA,YAAY,GAAGA,YAAY,CAACE,WAAb,GAA2BC,OAA3B,CAAmC,eAAnC,EAAoD,EAApD,CAAf,CAP8B,CAQ9B;;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADc,CAGd;;AACA,UAAMU,WAAW,GAAG,YAAY;AAC9B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEhB,cAAe,uBAAsBU,YAAa,EAD3B,CAA5B;AAGA,cAAMO,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CAJE,CAKF;;AACAZ,QAAAA,kBAAkB,CAACW,YAAY,CAACZ,eAAd,CAAlB;AACD,OAPD,CAOE,OAAOc,GAAP,EAAY;AACZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AACDf,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAbD;;AAcAU,IAAAA,WAAW;AACZ,GAnBQ,EAmBN,CAACJ,YAAD,CAnBM,CAAT;AAqBA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGG,CAACnB,SAAD,IAAcE,eAAd,iBACC;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,eAAe,CAACkB,MAAhB,KAA2B,CAA3B;AAAA;AACC;AACA,sBAAC,SAAD;AAAW,IAAA,YAAY,EAAEb,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,GAICL,eAAe,CAACmB,GAAhB,CAAqBC,OAAD,iBAClB,oBAAC,IAAD;AACE,IAAA,EAAE,EAAE;AACFC,MAAAA,QAAQ,EAAG,YAAWD,OAAO,CAACE,KAAM,EADlC;AAEFlB,MAAAA,MAAM,EAAG,GAAEgB,OAAO,CAACG,SAAU;AAF3B,KADN;AAKE,IAAA,GAAG,EAAEH,OAAO,CAACG,SALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEH,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,CALJ,CAJJ,CADF;AAgCD,CA/DD;;AAiEA,eAAexB,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"../components/Main/Header\";\r\nimport SearchListing from \"../components/SearchResults/SearchListing\";\r\nimport NoMatches from \"../components/SearchResults/NoMatches\";\r\nimport \"./styles/SearchResult.css\";\r\nimport Headernew from \"../components/Main/headernew\";\r\nimport BACKENDADDRESS from \"../constants/BackendAddress\";\r\n\r\nconst SearchResult = (props) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [matchedListings, setMatchedListings] = useState();\r\n  let query = props.location.search;\r\n\r\n  let searchphrase = query.substring(9);\r\n  // searchphrase = what the user typed\r\n  searchphrase = searchphrase.toLowerCase().replace(/(<([^>]+)>)/gi, \"\");\r\n  // TODO: configure for multiple words\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n\r\n    // call express api to get search results\r\n    const getListings = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `${BACKENDADDRESS}/api/search/keyword/${searchphrase}`\r\n        );\r\n        const responseData = await response.json();\r\n        // returns an array of listings\r\n        setMatchedListings(responseData.matchedListings);\r\n      } catch (err) {\r\n        // Todo: Add Error Handling if API call fails\r\n        console.log(err);\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n    getListings();\r\n  }, [searchphrase]);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      <Header />\r\n      {/* components in the div below only loads after data has been retrieved from API */}\r\n      {!isLoading && matchedListings && (\r\n        <div className=\"searchResultsPageBody\">\r\n          {matchedListings.length === 0 ? (\r\n            // No matches for what the user found\r\n            <NoMatches searchphrase={searchphrase} />\r\n          ) : (\r\n            matchedListings.map((listing) => (\r\n              <Link\r\n                to={{\r\n                  pathname: `/listing/${listing.title}`,\r\n                  search: `${listing.listingId}`,\r\n                }}\r\n                key={listing.listingId}\r\n              >\r\n                {/*url = /listing/?(title of listing) */}\r\n                <SearchListing listing={listing} />\r\n              </Link>\r\n            ))\r\n          )}\r\n          {/* Todo: Add this section when backend is included (Alot easier with backend)\r\n          <hr />\r\n          <p style={{margin:\"20px\"}}>Check out some of our other listings on the same platform</p>\r\n          Call some API here\r\n          */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n"]},"metadata":{},"sourceType":"module"}