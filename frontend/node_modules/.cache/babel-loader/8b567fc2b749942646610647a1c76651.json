{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from 'react';\nimport BACKENDADDRESS from \"../constants/BackendAddress\";\nexport const useAPI = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const activeRequests = useRef([]); // useCallback prevents API from being called multiple times when other components render\n\n  const sendRequest = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\n    setIsLoading(true); // create an abortController object which can be used to cancel request later on\n\n    const httpAbortController = new AbortController();\n    activeRequests.current.push(httpAbortController);\n\n    try {\n      const response = await fetch(url = BACKENDADDRESS + url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortController.signal\n      });\n      const responseData = await response.json(); // response.ok = response with status code of 200+ = no errors\n      // By default responses with error status codes do not throw errors\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      return responseData;\n    } catch (err) {\n      alert(err.message);\n    }\n  }, []);\n  useEffect(() => {\n    // cancel API request if parent component unmounts eg when you change page\n    return () => {\n      activeRequests.current.forEach(request => {\n        request.abort();\n      });\n    };\n  }, []);\n  return [sendRequest, isLoading];\n};","map":{"version":3,"sources":["/Users/user/link-project/link/frontend/src/utils/useAPI.js"],"names":["useState","useCallback","useRef","useEffect","BACKENDADDRESS","useAPI","isLoading","setIsLoading","activeRequests","sendRequest","url","method","body","headers","httpAbortController","AbortController","current","push","response","fetch","signal","responseData","json","ok","Error","message","err","alert","forEach","request","abort"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,WAAjB,EAA6BC,MAA7B,EAAoCC,SAApC,QAAoD,OAApD;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAM;AACxB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMQ,cAAc,GAAGN,MAAM,CAAC,EAAD,CAA7B,CAFwB,CAIxB;;AACA,QAAMO,WAAW,GAAGR,WAAW,CAC3B,OAAOS,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAE,EAAlD,KAAyD;AACrDN,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADqD,CAGrD;;AACA,UAAMO,mBAAmB,GAAG,IAAIC,eAAJ,EAA5B;AACAP,IAAAA,cAAc,CAACQ,OAAf,CAAuBC,IAAvB,CAA4BH,mBAA5B;;AAEA,QAAG;AACC,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CACxBT,GAAG,GAACN,cAAc,GAACM,GADK,EACA;AACxBC,QAAAA,MADwB;AAExBC,QAAAA,IAFwB;AAGxBC,QAAAA,OAHwB;AAIxBO,QAAAA,MAAM,EAACN,mBAAmB,CAACM;AAJH,OADA,CAA5B;AAQA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B,CATD,CAWC;AACA;;AACA,UAAI,CAACJ,QAAQ,CAACK,EAAd,EAAiB;AACb,cAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACH;;AACD,aAAOJ,YAAP;AACH,KAjBD,CAkBA,OAAMK,GAAN,EAAU;AACNC,MAAAA,KAAK,CAACD,GAAG,CAACD,OAAL,CAAL;AACH;AACR,GA7B8B,EA6B5B,EA7B4B,CAA/B;AA+BAtB,EAAAA,SAAS,CAAC,MAAI;AACV;AACA,WAAO,MAAM;AACTK,MAAAA,cAAc,CAACQ,OAAf,CAAuBY,OAAvB,CAA+BC,OAAO,IAAI;AAACA,QAAAA,OAAO,CAACC,KAAR;AAAgB,OAA3D;AACH,KAFD;AAGH,GALQ,EAKP,EALO,CAAT;AAOA,SAAO,CAACrB,WAAD,EAAaH,SAAb,CAAP;AACH,CA5CM","sourcesContent":["import {useState,useCallback,useRef,useEffect} from 'react';\nimport BACKENDADDRESS from \"../constants/BackendAddress\";\n\nexport const useAPI = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const activeRequests = useRef([]);\n\n    // useCallback prevents API from being called multiple times when other components render\n    const sendRequest = useCallback(\n        async (url, method = \"GET\", body = null, headers ={}) => {\n            setIsLoading(true);\n            \n            // create an abortController object which can be used to cancel request later on\n            const httpAbortController = new AbortController();\n            activeRequests.current.push(httpAbortController);\n\n            try{\n                const response = await fetch(\n                    url=BACKENDADDRESS+url, {\n                    method,\n                    body,\n                    headers,\n                    signal:httpAbortController.signal\n                    }\n                );\n                const responseData = await response.json();\n\n                // response.ok = response with status code of 200+ = no errors\n                // By default responses with error status codes do not throw errors\n                if (!response.ok){\n                    throw new Error(responseData.message)\n                }\n                return responseData;\n            }\n            catch(err){\n                alert(err.message);\n            }\n    }, [])\n\n    useEffect(()=>{\n        // cancel API request if parent component unmounts eg when you change page\n        return () => {\n            activeRequests.current.forEach(request => {request.abort()});\n        };\n    },[])\n\n    return [sendRequest,isLoading];\n}\n"]},"metadata":{},"sourceType":"module"}