{"ast":null,"code":"var _jsxFileName = \"/Users/user/link-project/link/frontend/src/screens/SearchResult.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Main/Header\";\nimport SearchListing from \"../components/SearchResults/SearchListing\";\nimport NoMatches from \"../components/SearchResults/NoMatches\";\nimport \"./styles/SearchResult.css\";\nimport Headernew from \"../components/Main/headernew\";\nimport { useAPI } from \"../utils/useAPI\";\n\nconst SearchResult = props => {\n  const [sendRequest, isLoading] = useAPI();\n  const [matchedListings, setMatchedListings] = useState();\n  let query = props.location.search; // searchphrase = what the user typed\n\n  const searchphrase = query.substring(9);\n  const filteredphrase = searchphrase.toLowerCase().replace(/(<([^>]+)>)/ig, \"\").replace(\" \", \"-\"); // fix multiple api requests whenever searchphrase changes\n  // TODO: configure for multiple words\n\n  useEffect(() => {\n    // call express api to get search results \n    const getListings = async () => {\n      const responseData = await sendRequest(`/api/search/keyword/${filteredphrase}`);\n      setMatchedListings(responseData.matchedListings);\n      console.log(matchedListings);\n    };\n\n    getListings();\n  }, [filteredphrase]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }), !isLoading && matchedListings && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResultsPageBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, matchedListings.length === 0 ?\n  /*#__PURE__*/\n  // No matches for what the user found\n  React.createElement(NoMatches, {\n    searchphrase: searchphrase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }) : matchedListings.map(listing => /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: `/listing/${listing.title}`,\n      search: `${listing.listingId}`\n    },\n    key: listing.listingId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SearchListing, {\n    listing: listing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }\n  })))));\n};\n\nexport default SearchResult;","map":{"version":3,"sources":["/Users/user/link-project/link/frontend/src/screens/SearchResult.js"],"names":["React","useEffect","useState","Link","Header","SearchListing","NoMatches","Headernew","useAPI","SearchResult","props","sendRequest","isLoading","matchedListings","setMatchedListings","query","location","search","searchphrase","substring","filteredphrase","toLowerCase","replace","getListings","responseData","console","log","width","length","map","listing","pathname","title","listingId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAO,2BAAP;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,SAAQC,MAAR,QAAqB,iBAArB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,WAAD,EAAaC,SAAb,IAA0BJ,MAAM,EAAtC;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,EAAtD;AACA,MAAIa,KAAK,GAAGL,KAAK,CAACM,QAAN,CAAeC,MAA3B,CAH8B,CAK9B;;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAArB;AACA,QAAMC,cAAc,GAAGF,YAAY,CAACG,WAAb,GAA2BC,OAA3B,CAAmC,eAAnC,EAAmD,EAAnD,EAAuDA,OAAvD,CAA+D,GAA/D,EAAmE,GAAnE,CAAvB,CAP8B,CAS9B;AACA;;AAEArB,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA,UAAMsB,WAAW,GAAG,YAAW;AAC7B,YAAMC,YAAY,GAAG,MAAMb,WAAW,CAAE,uBAAsBS,cAAe,EAAvC,CAAtC;AACAN,MAAAA,kBAAkB,CAACU,YAAY,CAACX,eAAd,CAAlB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYb,eAAZ;AACD,KAJD;;AAMAU,IAAAA,WAAW;AAEZ,GAXQ,EAWP,CAACH,cAAD,CAXO,CAAT;AAaE,sBACE;AAAK,IAAA,KAAK,EAAG;AAACO,MAAAA,KAAK,EAAC;AAAP,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGG,CAACf,SAAD,IAAcC,eAAd,iBACC;AAAK,IAAA,SAAS,EAAG,uBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIA,eAAe,CAACe,MAAhB,KAAyB,CAA1B;AAAA;AACH;AACE,sBAAC,SAAD;AAAW,IAAA,YAAY,EAAEV,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,GAGAL,eAAe,CAACgB,GAAhB,CAAoBC,OAAO,iBAC1B,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAG;AAAEC,MAAAA,QAAQ,EAAE,YAAWD,OAAO,CAACE,KAAM,EAArC;AAAwCf,MAAAA,MAAM,EAAE,GAAEa,OAAO,CAACG,SAAU;AAApE,KAAX;AACE,IAAA,GAAG,EAAGH,OAAO,CAACG,SADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEH,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADD,CAJH,CAJJ,CADF;AA0BH,CAnDD;;AAqDA,eAAerB,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Main/Header\";\nimport SearchListing from \"../components/SearchResults/SearchListing\";\nimport NoMatches from \"../components/SearchResults/NoMatches\";\nimport \"./styles/SearchResult.css\";\nimport Headernew from \"../components/Main/headernew\";\nimport {useAPI} from \"../utils/useAPI\";\n\nconst SearchResult = (props) => {\n  const [sendRequest,isLoading] = useAPI();\n  const [matchedListings, setMatchedListings] = useState();\n  let query = props.location.search;\n\n  // searchphrase = what the user typed\n  const searchphrase = query.substring(9);\n  const filteredphrase = searchphrase.toLowerCase().replace(/(<([^>]+)>)/ig,\"\").replace(\" \",\"-\");\n  \n  // fix multiple api requests whenever searchphrase changes\n  // TODO: configure for multiple words\n\n  useEffect(() => {\n  \n    // call express api to get search results \n    const getListings = async () =>{\n      const responseData = await sendRequest(`/api/search/keyword/${filteredphrase}`);\n      setMatchedListings(responseData.matchedListings);\n      console.log(matchedListings);\n    };\n\n    getListings();\n\n  },[filteredphrase]);\n\n    return (\n      <div style= {{width:\"100%\"}} >\n        <Header />\n        {/* components in the div below only loads after data has been retrieved from API */}\n        {!isLoading && matchedListings &&\n          <div className = \"searchResultsPageBody\">\n            {(matchedListings.length===0)?\n          // No matches for what the user found\n            <NoMatches searchphrase={searchphrase}/>\n            :matchedListings.map(listing => (\n              <Link to= {{ pathname:`/listing/${listing.title}`, search:`${listing.listingId}`}} \n                key= {listing.listingId}>\n                  { /*url = /listing/?(title of listing) */}\n                  <SearchListing listing={listing} />\n              </Link>\n              ))\n            }\n          {/* Todo: Add this section when backend is included (Alot easier with backend)\n          <hr />\n          <p style={{margin:\"20px\"}}>Check out some of our other listings on the same platform</p>\n          Call some API here\n          */}\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}