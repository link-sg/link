{"ast":null,"code":"var _jsxFileName = \"/Users/user/link-project/link/frontend/src/screens/SearchResult.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Main/Header\";\nimport SearchListing from '../components/SearchResults/SearchListing';\nimport NoMatches from \"../components/SearchResults/NoMatches\";\nimport \"./SearchResult.css\";\nimport Headernew from \"../components/Main/headernew\";\nimport BACKENDADDRESS from \"../constants/BackendAddress\";\n\nconst SearchResult = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [matchedListings, setMatchedListings] = useState();\n  let query = props.location.search; // searchphrase = what the user typed\n\n  const searchphrase = query.substring(9);\n  const filteredphrase = searchphrase.toLowerCase().replace(/(<([^>]+)>)/ig, \"\").replace(\" \", \"-\"); // fix multiple api requests whenever searchphrase changes\n  // TODO: configure for multiple words\n\n  useEffect(() => {\n    setIsLoading(true); // call express api to get search results \n\n    const getListings = async () => {\n      try {\n        const response = await fetch(`${BACKENDADDRESS}/api/search/keyword/${filteredphrase}`);\n        const responseData = await response.json(); // returns an array of listings\n\n        setMatchedListings(responseData.matchedListings);\n      } catch (err) {\n        // Todo: Add Error Handling if API call fails\n        console.log(err);\n      }\n\n      setIsLoading(false);\n    };\n\n    getListings();\n  }, [filteredphrase]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), !isLoading && matchedListings && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResultsPageBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, matchedListings.length === 0 ?\n  /*#__PURE__*/\n  // No matches for what the user found\n  React.createElement(NoMatches, {\n    searchphrase: searchphrase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }) : matchedListings.map(listing => /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: `/listing/${listing.title}`,\n      search: `${listing.listingId}`\n    },\n    key: listing.listingId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SearchListing, {\n    listing: listing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  })))));\n};\n\nexport default SearchResult;","map":{"version":3,"sources":["/Users/user/link-project/link/frontend/src/screens/SearchResult.js"],"names":["React","useEffect","useState","Link","Header","SearchListing","NoMatches","Headernew","BACKENDADDRESS","SearchResult","props","isLoading","setIsLoading","matchedListings","setMatchedListings","query","location","search","searchphrase","substring","filteredphrase","toLowerCase","replace","getListings","response","fetch","responseData","json","err","console","log","width","length","map","listing","pathname","title","listingId"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAO,oBAAP;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAE5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,eAAD,EAAiBC,kBAAjB,IAAuCZ,QAAQ,EAArD;AACA,MAAIa,KAAK,GAAGL,KAAK,CAACM,QAAN,CAAeC,MAA3B,CAJ4B,CAM5B;;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAArB;AACA,QAAMC,cAAc,GAAGF,YAAY,CAACG,WAAb,GAA2BC,OAA3B,CAAmC,eAAnC,EAAmD,EAAnD,EAAuDA,OAAvD,CAA+D,GAA/D,EAAmE,GAAnE,CAAvB,CAR4B,CAU5B;AACA;;AAEArB,EAAAA,SAAS,CAAC,MAAI;AACZW,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADY,CAGZ;;AACA,UAAMW,WAAW,GAAG,YAAW;AAC7B,UAAG;AAED,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEjB,cAAe,uBAAsBY,cAAe,EAAxD,CAA5B;AACA,cAAMM,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CAHC,CAID;;AACAb,QAAAA,kBAAkB,CAACY,YAAY,CAACb,eAAd,CAAlB;AAED,OAPD,CAOE,OAAMe,GAAN,EAAU;AACV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AACDhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAbD;;AAcAW,IAAAA,WAAW;AAEZ,GApBQ,EAoBP,CAACH,cAAD,CApBO,CAAT;AAsBE,sBACE;AAAK,IAAA,KAAK,EAAG;AAACW,MAAAA,KAAK,EAAC;AAAP,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGG,CAACpB,SAAD,IAAcE,eAAd,iBACC;AAAK,IAAA,SAAS,EAAG,uBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,eAAe,CAACmB,MAAhB,KAAyB,CAA1B;AAAA;AACD;AACA,sBAAC,SAAD;AAAW,IAAA,YAAY,EAAEd,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,GAGAL,eAAe,CAACoB,GAAhB,CAAoBC,OAAO,iBAC1B,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAG;AACTC,MAAAA,QAAQ,EAAE,YAAWD,OAAO,CAACE,KAAM,EAD1B;AAETnB,MAAAA,MAAM,EAAE,GAAEiB,OAAO,CAACG,SAAU;AAFnB,KAAX;AAGE,IAAA,GAAG,EAAGH,OAAO,CAACG,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEH,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADD,CAJD,CAJJ,CADF;AAgCH,CAnED;;AAqEA,eAAezB,YAAf","sourcesContent":["import React,{useEffect,useState} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Header from \"../components/Main/Header\";\nimport SearchListing from '../components/SearchResults/SearchListing';\nimport NoMatches from \"../components/SearchResults/NoMatches\";\nimport \"./SearchResult.css\";\nimport Headernew from \"../components/Main/headernew\";\nimport BACKENDADDRESS from \"../constants/BackendAddress\";\n\nconst SearchResult = props => {\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [matchedListings,setMatchedListings] = useState();\n  let query = props.location.search;\n\n  // searchphrase = what the user typed\n  const searchphrase = query.substring(9);\n  const filteredphrase = searchphrase.toLowerCase().replace(/(<([^>]+)>)/ig,\"\").replace(\" \",\"-\");\n  \n  // fix multiple api requests whenever searchphrase changes\n  // TODO: configure for multiple words\n\n  useEffect(()=>{\n    setIsLoading(true);\n  \n    // call express api to get search results \n    const getListings = async () =>{\n      try{\n        \n        const response = await fetch(`${BACKENDADDRESS}/api/search/keyword/${filteredphrase}`);\n        const responseData = await response.json();\n        // returns an array of listings\n        setMatchedListings(responseData.matchedListings);\n\n      } catch(err){\n        // Todo: Add Error Handling if API call fails\n        console.log(err);\n      }\n      setIsLoading(false);\n    }\n    getListings();\n\n  },[filteredphrase]);\n\n    return (\n      <div style= {{width:\"100%\"}} >\n        <Header />\n        {/* components in the div below only loads after data has been retrieved from API */}\n        {!isLoading && matchedListings &&\n          <div className = \"searchResultsPageBody\">\n          {(matchedListings.length===0)?\n          // No matches for what the user found\n          <NoMatches searchphrase={searchphrase}/>\n          :matchedListings.map(listing => (\n            <Link to= {{\n              pathname:`/listing/${listing.title}`,\n              search:`${listing.listingId}`}} \n              key= {listing.listingId}>\n                { /*url = /listing/?(title of listing) */}\n                <SearchListing listing={listing} />\n            </Link>\n          )\n           \n          )}\n          {/* Todo: Add this section when backend is included (Alot easier with backend)\n          <hr />\n          <p style={{margin:\"20px\"}}>Check out some of our other listings on the same platform</p>\n          Call some API here\n          */}\n          \n        </div>\n        }\n      </div>\n        \n    );\n  \n};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}