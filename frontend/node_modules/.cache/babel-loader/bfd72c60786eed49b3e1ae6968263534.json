{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marcus\\\\link\\\\frontend\\\\src\\\\screens\\\\SearchResult.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Main/Header\";\nimport SearchListing from \"../components/SearchResults/SearchListing\";\nimport NoMatches from \"../components/SearchResults/NoMatches\";\nimport \"./styles/SearchResult.css\";\nimport Headernew from \"../components/Main/headernew\";\nimport BACKENDADDRESS from \"../constants/BackendAddress\";\n\nconst SearchResult = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [matchedListings, setMatchedListings] = useState();\n  let query = props.location.search; // searchphrase = what the user typed\n\n  const searchphrase = query.substring(9);\n  const filteredphrase = searchphrase.toLowerCase().replace(/(<([^>]+)>)/ig, \"\").replace(\" \", \"-\"); // fix multiple api requests whenever searchphrase changes\n  // TODO: configure for multiple words\n\n  useEffect(() => {\n    setIsLoading(true); // call express api to get search results \n\n    const getListings = async () => {\n      try {\n        const response = await fetch(`${BACKENDADDRESS}/api/search/keyword/${filteredphrase}`);\n        const responseData = await response.json(); // returns an array of listings\n\n        setMatchedListings(responseData.matchedListings);\n      } catch (err) {\n        // Todo: Add Error Handling if API call fails\n        console.log(err);\n      }\n\n      setIsLoading(false);\n    };\n\n    getListings();\n  }, [filteredphrase]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), !isLoading && matchedListings && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResultsPageBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, matchedListings.length === 0 ?\n  /*#__PURE__*/\n  // No matches for what the user found\n  React.createElement(NoMatches, {\n    searchphrase: searchphrase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }) : matchedListings.map(listing => /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: `/listing/${listing.title}`,\n      search: `${listing.listingId}`\n    },\n    key: listing.listingId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SearchListing, {\n    listing: listing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }\n  })))));\n};\n\nexport default SearchResult;","map":{"version":3,"sources":["C:/Users/marcus/link/frontend/src/screens/SearchResult.js"],"names":["React","useEffect","useState","Link","Header","SearchListing","NoMatches","Headernew","BACKENDADDRESS","SearchResult","props","isLoading","setIsLoading","matchedListings","setMatchedListings","query","location","search","searchphrase","substring","filteredphrase","toLowerCase","replace","getListings","response","fetch","responseData","json","err","console","log","width","length","map","listing","pathname","title","listingId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAO,2BAAP;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,EAAtD;AACA,MAAIa,KAAK,GAAGL,KAAK,CAACM,QAAN,CAAeC,MAA3B,CAH8B,CAK9B;;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAArB;AACA,QAAMC,cAAc,GAAGF,YAAY,CAACG,WAAb,GAA2BC,OAA3B,CAAmC,eAAnC,EAAmD,EAAnD,EAAuDA,OAAvD,CAA+D,GAA/D,EAAmE,GAAnE,CAAvB,CAP8B,CAS9B;AACA;;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADc,CAGd;;AACA,UAAMW,WAAW,GAAG,YAAW;AAC7B,UAAG;AAED,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEjB,cAAe,uBAAsBY,cAAe,EAAxD,CAA5B;AACA,cAAMM,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CAHC,CAID;;AACAb,QAAAA,kBAAkB,CAACY,YAAY,CAACb,eAAd,CAAlB;AACD,OAND,CAME,OAAOe,GAAP,EAAY;AACZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AACDhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAZD;;AAaAW,IAAAA,WAAW;AAEZ,GAnBQ,EAmBP,CAACH,cAAD,CAnBO,CAAT;AAqBE,sBACE;AAAK,IAAA,KAAK,EAAG;AAACW,MAAAA,KAAK,EAAC;AAAP,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGG,CAACpB,SAAD,IAAcE,eAAd,iBACC;AAAK,IAAA,SAAS,EAAG,uBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIA,eAAe,CAACmB,MAAhB,KAAyB,CAA1B;AAAA;AACH;AACE,sBAAC,SAAD;AAAW,IAAA,YAAY,EAAEd,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,GAGAL,eAAe,CAACoB,GAAhB,CAAoBC,OAAO,iBAC1B,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAG;AAAEC,MAAAA,QAAQ,EAAE,YAAWD,OAAO,CAACE,KAAM,EAArC;AAAwCnB,MAAAA,MAAM,EAAE,GAAEiB,OAAO,CAACG,SAAU;AAApE,KAAX;AACE,IAAA,GAAG,EAAGH,OAAO,CAACG,SADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEH,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADD,CAJH,CAJJ,CADF;AA0BH,CA3DD;;AA6DA,eAAezB,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"../components/Main/Header\";\r\nimport SearchListing from \"../components/SearchResults/SearchListing\";\r\nimport NoMatches from \"../components/SearchResults/NoMatches\";\r\nimport \"./styles/SearchResult.css\";\r\nimport Headernew from \"../components/Main/headernew\";\r\nimport BACKENDADDRESS from \"../constants/BackendAddress\";\r\n\r\nconst SearchResult = (props) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [matchedListings, setMatchedListings] = useState();\r\n  let query = props.location.search;\r\n\r\n  // searchphrase = what the user typed\r\n  const searchphrase = query.substring(9);\r\n  const filteredphrase = searchphrase.toLowerCase().replace(/(<([^>]+)>)/ig,\"\").replace(\" \",\"-\");\r\n  \r\n  // fix multiple api requests whenever searchphrase changes\r\n  // TODO: configure for multiple words\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n  \r\n    // call express api to get search results \r\n    const getListings = async () =>{\r\n      try{\r\n        \r\n        const response = await fetch(`${BACKENDADDRESS}/api/search/keyword/${filteredphrase}`);\r\n        const responseData = await response.json();\r\n        // returns an array of listings\r\n        setMatchedListings(responseData.matchedListings);\r\n      } catch (err) {\r\n        // Todo: Add Error Handling if API call fails\r\n        console.log(err);\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n    getListings();\r\n\r\n  },[filteredphrase]);\r\n\r\n    return (\r\n      <div style= {{width:\"100%\"}} >\r\n        <Header />\r\n        {/* components in the div below only loads after data has been retrieved from API */}\r\n        {!isLoading && matchedListings &&\r\n          <div className = \"searchResultsPageBody\">\r\n            {(matchedListings.length===0)?\r\n          // No matches for what the user found\r\n            <NoMatches searchphrase={searchphrase}/>\r\n            :matchedListings.map(listing => (\r\n              <Link to= {{ pathname:`/listing/${listing.title}`, search:`${listing.listingId}`}} \r\n                key= {listing.listingId}>\r\n                  { /*url = /listing/?(title of listing) */}\r\n                  <SearchListing listing={listing} />\r\n              </Link>\r\n              ))\r\n            }\r\n          {/* Todo: Add this section when backend is included (Alot easier with backend)\r\n          <hr />\r\n          <p style={{margin:\"20px\"}}>Check out some of our other listings on the same platform</p>\r\n          Call some API here\r\n          */}\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n"]},"metadata":{},"sourceType":"module"}