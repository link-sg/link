{"ast":null,"code":"var _jsxFileName = \"/Users/user/link-project/link/frontend/src/screens/SearchResult.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Main/Header\";\nimport SearchListing from \"../components/SearchResults/SearchListing\";\nimport NoMatches from \"../components/SearchResults/NoMatches\";\nimport \"./styles/SearchResult.css\";\nimport Headernew from \"../components/Main/headernew\";\nimport { useAPI } from \"../utils/useAPI\";\n\nconst SearchResult = props => {\n  const [sendRequest, isLoading] = useAPI();\n  const [matchedListings, setMatchedListings] = useState();\n  let query = props.location.search; // searchphrase = what the user typed\n\n  const searchphrase = query.substring(9);\n  const filteredphrase = searchphrase.toLowerCase().replace(/(<([^>]+:)>)/gi, \"\").replace(\" \", \"-\"); // fix multiple api requests whenever searchphrase changes\n  // TODO: configure for multiple words\n\n  useEffect(() => {\n    // call express api to get search results\n    const getListings = async () => {\n      const responseData = await sendRequest(`/api/search/keyword/${filteredphrase}`);\n      setMatchedListings(responseData.matchedListings);\n    };\n\n    getListings();\n  }, [filteredphrase]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), !isLoading && matchedListings && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResultsPageBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, matchedListings.length === 0 ?\n  /*#__PURE__*/\n  // No matches for what the user found\n  React.createElement(NoMatches, {\n    searchphrase: searchphrase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }) : matchedListings.map(listing => /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: `/listing/${listing.title}`,\n      search: `${listing.listingId}`\n    },\n    key: listing.listingId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SearchListing, {\n    listing: listing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  })))));\n};\n\nexport default SearchResult;","map":{"version":3,"sources":["/Users/user/link-project/link/frontend/src/screens/SearchResult.js"],"names":["React","useEffect","useState","Link","Header","SearchListing","NoMatches","Headernew","useAPI","SearchResult","props","sendRequest","isLoading","matchedListings","setMatchedListings","query","location","search","searchphrase","substring","filteredphrase","toLowerCase","replace","getListings","responseData","width","length","map","listing","pathname","title","listingId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAO,2BAAP;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,WAAD,EAAcC,SAAd,IAA2BJ,MAAM,EAAvC;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,EAAtD;AACA,MAAIa,KAAK,GAAGL,KAAK,CAACM,QAAN,CAAeC,MAA3B,CAH8B,CAK9B;;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAArB;AACA,QAAMC,cAAc,GAAGF,YAAY,CAChCG,WADoB,GAEpBC,OAFoB,CAEZ,gBAFY,EAEM,EAFN,EAGpBA,OAHoB,CAGZ,GAHY,EAGP,GAHO,CAAvB,CAP8B,CAY9B;AACA;;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMsB,WAAW,GAAG,YAAY;AAC9B,YAAMC,YAAY,GAAG,MAAMb,WAAW,CACnC,uBAAsBS,cAAe,EADF,CAAtC;AAGAN,MAAAA,kBAAkB,CAACU,YAAY,CAACX,eAAd,CAAlB;AACD,KALD;;AAMAU,IAAAA,WAAW;AACZ,GATQ,EASN,CAACH,cAAD,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGG,CAACb,SAAD,IAAcC,eAAd,iBACC;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,eAAe,CAACa,MAAhB,KAA2B,CAA3B;AAAA;AACC;AACA,sBAAC,SAAD;AAAW,IAAA,YAAY,EAAER,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,GAICL,eAAe,CAACc,GAAhB,CAAqBC,OAAD,iBAClB,oBAAC,IAAD;AACE,IAAA,EAAE,EAAE;AACFC,MAAAA,QAAQ,EAAG,YAAWD,OAAO,CAACE,KAAM,EADlC;AAEFb,MAAAA,MAAM,EAAG,GAAEW,OAAO,CAACG,SAAU;AAF3B,KADN;AAKE,IAAA,GAAG,EAAEH,OAAO,CAACG,SALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEH,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,CALJ,CAJJ,CADF;AAgCD,CA1DD;;AA4DA,eAAenB,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../components/Main/Header\";\nimport SearchListing from \"../components/SearchResults/SearchListing\";\nimport NoMatches from \"../components/SearchResults/NoMatches\";\nimport \"./styles/SearchResult.css\";\nimport Headernew from \"../components/Main/headernew\";\nimport { useAPI } from \"../utils/useAPI\";\n\nconst SearchResult = (props) => {\n  const [sendRequest, isLoading] = useAPI();\n  const [matchedListings, setMatchedListings] = useState();\n  let query = props.location.search;\n\n  // searchphrase = what the user typed\n  const searchphrase = query.substring(9);\n  const filteredphrase = searchphrase\n    .toLowerCase()\n    .replace(/(<([^>]+:)>)/gi, \"\")\n    .replace(\" \", \"-\");\n\n  // fix multiple api requests whenever searchphrase changes\n  // TODO: configure for multiple words\n\n  useEffect(() => {\n    // call express api to get search results\n    const getListings = async () => {\n      const responseData = await sendRequest(\n        `/api/search/keyword/${filteredphrase}`\n      );\n      setMatchedListings(responseData.matchedListings);\n    };\n    getListings();\n  }, [filteredphrase]);\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <Header />\n      {/* components in the div below only loads after data has been retrieved from API */}\n      {!isLoading && matchedListings && (\n        <div className=\"searchResultsPageBody\">\n          {matchedListings.length === 0 ? (\n            // No matches for what the user found\n            <NoMatches searchphrase={searchphrase} />\n          ) : (\n            matchedListings.map((listing) => (\n              <Link\n                to={{\n                  pathname: `/listing/${listing.title}`,\n                  search: `${listing.listingId}`,\n                }}\n                key={listing.listingId}\n              >\n                {/*url = /listing/?(title of listing) */}\n                <SearchListing listing={listing} />\n              </Link>\n            ))\n          )}\n          {/* Todo: Add this section when backend is included (Alot easier with backend)\n          <hr />\n          <p style={{margin:\"20px\"}}>Check out some of our other listings on the same platform</p>\n          Call some API here\n          */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}